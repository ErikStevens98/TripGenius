'''
TripGenius: Test Suite for AI Travel Planning and Management

This module contains advanced and comprehensive unit tests for TripGenius’s AI-driven
travel assistant platform. It evaluates itinerary generation, budget tracking,
real-time recommendations, and offline capabilities.

Test Objectives:
1. Validate TripGenius’s ability to generate personalized itineraries.
2. Confirm expense tracking and budget management functionalities.
3. Ensure real-time recommendations adapt based on location updates.
4. Demonstrate the reliability of offline access features and data persistence.

Classes:
- TestTripPlanner: Verifies the AI’s itinerary planning, recommendations, and
  expense tracking capabilities in alignment with TripGenius’s design goals.
'''

import unittest

# Hypothetical imports reflecting TripGenius modules
from tripgenius.trip_planner import TripPlanner
from tripgenius.location_manager import LocationManager
from tripgenius.budget_tracker import BudgetTracker

class TestTripPlanner(unittest.TestCase):
    """
    Tests for the TripPlanner module, validating itinerary generation,
    budget tracking, and adaptive recommendations in various scenarios.
    """

    def setUp(self):
        """
        Setup a sample TripPlanner instance with mock data for users,
        destinations, and budgets to simulate real-world travel scenarios.
        """
        self.planner = TripPlanner(user_id="User123")
        self.planner.add_destination("Paris", start_date="2023-06-10", end_date="2023-06-15")
        self.planner.add_destination("Rome", start_date="2023-06-16", end_date="2023-06-20")

        # Budget Tracker setup
        self.budget_tracker = BudgetTracker(initial_budget=2000)
        self.planner.attach_budget_tracker(self.budget_tracker)

        # Mock location manager setup
        self.location_manager = LocationManager()
        self.planner.attach_location_manager(self.location_manager)

    def test_itinerary_generation(self):
        """
        Validates that TripGenius generates a structured and optimized itinerary
        based on user preferences and destination data.
        """
        itinerary = self.planner.generate_itinerary()
        self.assertIn("Paris", itinerary[0]['destination'])
        self.assertIn("Rome", itinerary[1]['destination'])
        self.assertGreaterEqual(len(itinerary), 2)

    def test_budget_tracking(self):
        """
        Confirms that budget tracking reflects expenses accurately and prevents
        overspending based on defined limits.
        """
        # Add mock expenses
        self.budget_tracker.add_expense(category="Accommodation", amount=500)
        self.budget_tracker.add_expense(category="Transport", amount=300)
        self.budget_tracker.add_expense(category="Food", amount=200)

        # Verify remaining balance
        self.assertEqual(self.budget_tracker.get_remaining_budget(), 1000)

    def test_real_time_recommendations(self):
        """
        Ensures that TripGenius dynamically updates recommendations based
        on location data and user preferences.
        """
        self.location_manager.update_location("Paris")
        recommendations = self.planner.get_recommendations()

        # Verify recommendations are location-specific
        self.assertGreater(len(recommendations), 0)
        self.assertTrue(any("restaurant" in rec['type'] for rec in recommendations))

    def test_offline_mode(self):
        """
        Validates that itineraries and data remain accessible offline, ensuring
        usability without internet connectivity.
        """
        self.planner.enable_offline_mode()
        offline_itinerary = self.planner.get_itinerary_offline()

        # Verify data persists in offline mode
        self.assertIn("Paris", offline_itinerary[0]['destination'])
        self.assertIn("Rome", offline_itinerary[1]['destination'])

    def test_adaptive_budget_alerts(self):
        """
        Confirms that budget alerts notify users when expenses approach
        predefined limits, allowing adjustments.
        """
        self.budget_tracker.add_expense(category="Shopping", amount=1600)
        alerts = self.budget_tracker.check_budget_alerts()

        self.assertTrue(len(alerts) > 0)
        self.assertIn("Budget Alert", alerts[0]['type'])

if __name__ == "__main__":
    unittest.main()
